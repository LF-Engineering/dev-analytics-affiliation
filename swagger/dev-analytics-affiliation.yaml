---
swagger: '2.0'
info:
  title: Dev Analytics Affiliation API
  version: '1.0'
  description: Dev Analytics Affiliations API
basePath: /v1
paths:
  /health:
    get:
      summary: Health
      operationId: getHealth
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/health"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - health
  /affiliation/{projectSlug}/top_contributors_csv:
    get:
      summary: Get top contributors with their stats
      operationId: getTopContributorsCSV
      produces:
        - application/octet-stream
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
            Content-Disposition:
              type: string
              pattern: attachment; filename="top_contributors.csv"
            Content-Type:
              type: string
              pattern: application/octet-stream
          schema:
            type: file
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - contributors
        - top
        - get
        - csv
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/unix-millis-from'
        - $ref: '#/parameters/unix-millis-to'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
        - $ref: '#/parameters/sort-field'
        - $ref: '#/parameters/sort-order'
  /affiliation/{projectSlug}/top_contributors:
    get:
      summary: Get top contributors with their stats
      operationId: getTopContributors
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/top-contributors-flat-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - contributors
        - top
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/unix-millis-from'
        - $ref: '#/parameters/unix-millis-to'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
        - $ref: '#/parameters/sort-field'
        - $ref: '#/parameters/sort-order'
  /affiliation/{projectSlug}/unaffiliated:
    get:
      summary: Get top unaffiliated users
      operationId: getUnaffiliated
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-unaffiliated-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - unaffiliated
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
  /affiliation/{projectSlug}/matching_blacklist:
    get:
      summary: Get blacklisted emails
      operationId: getMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-matching-blacklist-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - matching_blacklist
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/{projectSlug}/matching_blacklist/{email}:
    post:
      summary: Add blacklist email
      operationId: postMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/matching-blacklist-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - matching_blacklist
        - add
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/required-email'
    delete:
      summary: Delete blacklist email
      operationId: deleteMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - matching_blacklist
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/required-email'
  /affiliation/{projectSlug}/list_organizations:
    get:
      summary: Get organizations
      operationId: getListOrganizations
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-organizations-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - list_organizations
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/{projectSlug}/add_organization/{orgName}:
    post:
      summary: Add organization
      operationId: postAddOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - add_organization
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlug}/edit_organization/{orgID}/{orgName}:
    put:
      summary: Edit organization
      operationId: putEditOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - edit_organization
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-id'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlug}/find_organization_by_id/{orgID}:
    get:
      summary: Find organization by ID
      operationId: getFindOrganizationByID
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - find_organization
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-id'
  /affiliation/{projectSlug}/find_organization_by_name/{orgName}:
    get:
      summary: Find organization by Name
      operationId: getFindOrganizationByName
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - find_organization
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlug}/delete_organization_by_id/{orgID}:
    delete:
      summary: Delete organization by ID
      operationId: deleteOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - organization
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-id'
  /affiliation/{projectSlug}/list_domains:
    get:
      summary: Get organization domains
      operationId: getListOrganizationsDomains
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-organizations-domains-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - list_organization_domains
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
        - name: orgID
          in: query
          type: integer
          default: 0
          description: Organization ID, if you specify 0 it will list data for all organizations
  /affiliation/{projectSlug}/add_domain/{orgName}/{domain}:
    put:
      summary: Add domain to organization (if not exists) and affiliate all profiles with that domain to this organization
      operationId: putOrgDomain
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully added domain to organization"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/put-org-domain-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - organization
        - domain
        - add
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/domain'
        - name: overwrite
          in: query
          type: boolean
          default: false
          description: If set, it will overwrite existing affiliations for users with matching domains
        - name: is_top_domain
          in: query
          type: boolean
          default: false
          description: If set, it will set top domain flag to true
        - name: skip_enrollments
          in: query
          type: boolean
          default: false
          description: If set, it will not change/add/remove/touch any enrollments
  /affiliation/{projectSlug}/remove_domain/{orgName}/{domain}:
    delete:
      summary: Remove domain from organization
      operationId: deleteOrgDomain
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully added domain to organization"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - organization
        - domain
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/domain'
  /affiliation/{projectSlug}/list_profiles:
    get:
      summary: Get profiles
      operationId: getListProfiles
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-profiles-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - list_profiles
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/{projectSlug}/get_profile/{uuid}:
    get:
      summary: Get profile with given UUID
      operationId: getProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - get_profile
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlug}/delete_profile/{uuid}:
    delete:
      summary: Delete profile with given UUID (it will cascade delete all objects referring to that uuid)
      operationId: deleteProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - delete_profile
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - name: archive
          in: query
          type: boolean
          default: false
          description: If set, it will archive profile (and all dependend objects, so full restore will be possible)
  /affiliation/{projectSlug}/unarchive_profile/{uuid}:
    post:
      summary: Unarchive profile with given UUID
      operationId: postUnarchiveProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - delete_profile
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlug}/edit_profile/{uuid}:
    put:
      summary: Edit profile
      operationId: putEditProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - edit_profile
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/email'
        - name: name
          in: query
          type: string
          description: Profile name (can be empty, if not set then no update of that parameter is made, applies to all remaining params)
        - name: gender
          in: query
          type: string
          description: Profile gender (male or female)
        - name: gender_acc
          in: query
          type: integer
          description: Profile gender probablity 1-100
        - name: is_bot
          in: query
          type: integer
          description: Profile bot flag 0 or 1
        - name: country_code
          in: query
          type: string
          description: "Profile country code - 2 letters: PL, US, checked against FK constraint 'countries' table"
  /affiliation/{projectSlug}/add_unique_identity/{uuid}:
    post:
      summary: create unique identity and empty profile connected with it
      operationId: postAddUniqueIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - add_unique_identity
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlug}/add_identity/{source}:
    post:
      summary: create idenity (unique by source, email, name, username), if uuid is set connect it to that uuid or create new unique identity with that uuid otherwise
      operationId: postAddIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - add_unique_identity
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/email'
        - name: source
          in: path
          type: string
          required: true
          description: Identity source
        - name: name
          in: query
          type: string
          description: Identity name (can be empty, if not set then no update of that parameter is made, applies to all remaining params)
        - name: username
          in: query
          type: string
          description: Identity username
        - name: uuid
          in: query
          type: string
          description: Identity UUID (uuid it belongs to), can be empty, new unique identity will be added then
  /affiliation/{projectSlug}/delete_identity/{id}:
    delete:
      summary: Delete identity with given ID (it will cascade delete all objects referring to that identity)
      operationId: deleteIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - delete_identity
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - name: id
          in: path
          type: string
          required: true
          description: Identity ID to be deleted
  /affiliation/{projectSlug}/merge_unique_identities/{fromUUID}/{toUUID}:
    put:
      summary: Merge Unique Identities fromUUID into toUUID
      operationId: putMergeUniqueIdentities
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully merged unique identities"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - name: fromUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge from
        - name: toUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge to
        - name: archive
          in: query
          type: boolean
          default: true
          description: If set, it will archive data so it can be unmerged later
  /affiliation/{projectSlug}/move_identity/{fromID}/{toUUID}:
    put:
      summary: Move identity from fromID to unique identity/profile toUUID
      operationId: putMoveIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully moved identity"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - name: fromID
          in: path
          type: string
          required: true
          description: Identity ID to merge from
        - name: toUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge to
        - name: archive
          in: query
          type: boolean
          default: true
          description: If set, it will attempt to unarchive data
  /affiliation/{projectSlug}/enrollments/{uuid}:
    get:
      summary: Get profile's enrollments - profile specified by UUID
      operationId: getProfileEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-profile-enrollments-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - get_profile_enrollments
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlug}/add_enrollment/{uuid}/{orgName}:
    post:
      summary: Add enrollment to profile
      operationId: postAddEnrollment
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - add_enrollment
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/merge'
  /affiliation/{projectSlug}/edit_enrollment/{uuid}/{orgName}:
    put:
      summary: Edit profile enrollment
      operationId: putEditEnrollment
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - add_enrollment
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/merge'
        - name: new_start
          in: query
          type: string
          format: date-time
          description: Optional date from (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new start date for the existing enrollment
        - name: new_end
          in: query
          type: string
          format: date-time
          description: Optional date to (default is 2100-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new end date for the existing enrollment
  /affiliation/{projectSlug}/delete_enrollments/{uuid}/{orgName}:
    delete:
      summary: Delete orgName enrollment from profile
      operationId: deleteEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - delete_enrollments
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
  /affiliation/{projectSlug}/merge_enrollments/{uuid}/{orgName}:
    put:
      summary: Merge overlapping enrollments for UUID/orgName
      operationId: putMergeEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - merge_enrollments
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
  /affiliation/all:
    get:
      summary: Return all affiliations data in human readable format
      operationId: getAllAffiliations
      produces:
        - application/yaml
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/all-array-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - all
        - get
  /affiliation/bulk_update:
    post:
      summary: Bulk process updates to DB
      operationId: postBulkUpdate
      consumes:
        - application/yaml
        - application/json
      produces:
        - application/yaml
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/invalid-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
      tags:
        - affiliation
        - bulk_update
        - post
      parameters:
        - name: body
          in: body
          required: true
          description: arrays of profiles to be added and/or deleted
          schema:
            $ref: "#/definitions/db-update"
parameters:
  auth:
    name: Authorization
    in: header
    type: string
    required: true
  project-slug:
    name: projectSlug
    in: path
    type: string
    required: true
    description: Project slug URL encoded like 'academy-software-foundation/opencue'
  uuid:
    name: uuid
    in: path
    type: string
    required: true
    description: UUID
  unix-millis-from:
    name: from
    in: query
    type: integer
    description: the datetime from, e.g 1552790984700, default is 90 days ago
  unix-millis-to:
    name: to
    in: query
    type: integer
    description: the datetime to, e.g 1552790984700, default is now
  page:
    name: page
    in: query
    type: integer
    default: 1
    description: If set, it will return rows from a given page
  rows:
    name: rows
    in: query
    type: integer
    default: 10
    description: rows per page, if 0 maximum page size 65535 is set
  q:
    name: q
    in: query
    type: string
    default: ''
    description: If set, it will return matching '%q%' (possibly using more than one property for that search)
  limit:
    name: limit
    in: query
    type: integer
    default: 10
    description: The numbers of data to return, default 10
  offset:
    name: offset
    in: query
    type: integer
    default: 0
    description: the page offset
  search:
    name: search
    in: query
    type: string
    description: search string for example john
  sort-field:
    name: sort_field
    in: query
    type: string
    description: sort field for example gerrit_merged_changesets
  sort-order:
    name: sort_order
    in: query
    type: string
    description: sort order for example desc
  required-email:
    name: email
    in: path
    type: string
    required: true
    description: email
  email:
    name: email
    in: query
    type: string
    description: email
  org-id:
    name: orgID
    in: path
    type: integer
    required: true
    description: Organization ID
  org-name:
    name: orgName
    in: path
    type: string
    required: true
    description: Organization name
  domain:
    name: domain
    in: path
    type: string
    required: true
    description: Domain
  start:
    name: start
    in: query
    type: string
    format: date-time
    description: Optional date from (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z]
  end:
    name: end
    in: query
    type: string
    format: date-time
    description: Optional date to (default is 2100-01-01), must be in format 2015-05-05T15:15[:05Z]
  merge:
    name: merge
    in: query
    type: boolean
    description: merge setting
definitions:
  health:
    type: object
    title: Health
    description: Properties for Health
    properties:
      DateTime:
        type: string
        example: "2019-05-29 16:55:53.849593192 +0900 KST m=+12.237337959"
      DevAnalyticsAffiliationService:
        type: string
        example: "Running"
  error-response:
    type: object
    title: Error Response
    description: Standard error format
    properties:
      Code:
        type: string
      Message:
        type: string
  put-org-domain-output:
    title: Put Org Domain Output
    description: Stats and info about adding domain to organization
    type: object
    properties:
      deleted:
        type: string
        example: 12
      added:
        type: string
        example: 8
      info:
        type: string
        example: no such organization Mikrosoft
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
  profile-data-output:
    title: Profile data output
    description: Profile data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      name:
        type: string
        x-nullable: true
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        example: lgryglicki@cncf.io
      gender:
        type: string
        example: male
        x-nullable: true
      gender_acc:
        type: integer
        example: 100
        x-nullable: true
      is_bot:
        type: integer
        # database doesn't have null, but we can use to to call EditProfile and skip updating is_bot
        x-nullable: true
        example: 1
      country_code:
        type: string
        x-nullable: true
        example: PL
  country-data-output:
    title: Country data output
    description: Country data
    type: object
    properties:
      code:
        type: string
        example: PL
      name:
        type: string
        example: Poland
      alpha3:
        type: string
        example: POL
  identity-data-output:
    title: Identity data output
    description: Identity data
    type: object
    properties:
      id:
        type: string
        example: 16fe424acecf8d614d102fc0ece919a22200481d
      source:
        type: string
        example: github
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
        x-nullable: true
      name:
        type: string
        x-nullable: true
        example: Lukasz Gryglicki
      username:
        type: string
        x-nullable: true
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        example: lgryglicki@cncf.io
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
  unique-identity-data-output:
    title: Unique Identity data output
    description: Unique Identity data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
  enrollment-nested-data-output:
    title: Enrollment data output
    description: Enrollment data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      organization_id:
        type: integer
        example: 33073
      start:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      end:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      organization:
        type: object
        $ref: "#/definitions/organization-data-output"
  enrollment-data-output:
    title: Enrollment data output
    description: Enrollment data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      organization_id:
        type: integer
        example: 33073
      start:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      end:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
  organization-data-output:
    title: Organization data output
    description: Organization data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      name:
        type: string
        example: CNCF
  matching-blacklist-output:
    title: Matching blacklist data output
    description: Matching blacklist data
    type: object
    properties:
      excluded:
        type: string
        example: skip@domain.org
  get-matching-blacklist-output:
    title: Matching blacklist data output
    description: Matching blacklist data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      rows:
        type: integer
        example: 55
      emails:
        type: array
        items:
          $ref: "#/definitions/matching-blacklist-output"
  domain-data-output:
    title: Domain data
    description: Domain data
    type: object
    properties:
      id:
        type: integer
        example: 1000
      organization_id:
        type: integer
        example: 2000
      # this should be called 'domain' but we need to stay compatible
      name:
        type: string
        example: cncf.io
      is_top_domain:
        type: boolean
        example: true
      organization_name:
        type: string
        example: CNCF
  organization-nested-data-output:
    title: Organization data with nested organization domains
    description: Organization data with nested organization domains
    type: object
    properties:
      id:
        type: integer
        example: 1000
      name:
        type: string
        example: CNCF
      domains:
        type: array
        items:
          $ref: "#/definitions/domain-data-output"
  get-list-organizations-output:
    title: List organizations data output
    description: List organizations data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      n_records:
        type: integer
        example: 55
      rows:
        type: integer
        example: 9
      organizations:
        type: array
        items:
          $ref: "#/definitions/organization-nested-data-output"
  get-list-organizations-domains-output:
    title: List organizations domains data output
    description: List organizations domains data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      n_records:
        type: integer
        example: 55
      rows:
        type: integer
        example: 9
      domains:
        type: array
        items:
          $ref: "#/definitions/domain-data-output"
  unaffiliated-data-output:
    title: Unaffiliated user data
    description: Unaffiliated user data
    type: object
    properties:
      name:
        type: string
        example: Lukasz Gryglicki
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      contributions:
        type: integer
        example: 100
  get-unaffiliated-output:
    title: Unaffiliated users output
    description: Unaffiliated users output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      page:
        type: integer
        example: 2
      rows:
        type: integer
        example: 10
      unaffiliated:
        type: array
        items:
          $ref: "#/definitions/unaffiliated-data-output"
  contributor-flat-stats:
    title: Contributor stats
    description: contributor stats
    type: object
    properties:
      name:
        type: string
        example: Lukasz Gryglicki
        x-omitempty: false
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
        x-omitempty: false
      email:
        type: string
        example: lgryglicki@cncf.io
        x-omitempty: false
      organization:
        type: string
        example: CNCF
        x-omitempty: false
      docs:
        type: integer
        example: 1000
        x-omitempty: false
      git_commits:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_of_code_added:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_of_code_removed:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_of_code_changed:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_merged_changesets:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_reviews_approved:
        type: integer
        example: 123
        x-omitempty: false
      jira_issues_created:
        type: integer
        example: 123
        x-omitempty: false
      jira_issues_assigned:
        type: integer
        example: 123
        x-omitempty: false
      jira_average_issues_open_days:
        type: number
        example: 123.5
        x-omitempty: false
      confluence_pages_created:
        type: integer
        example: 123
        x-omitempty: false
      confluence_pages_edited:
        type: integer
        example: 123
        x-omitempty: false
      confluence_comments:
        type: integer
        example: 123
        x-omitempty: false
      confluence_blog_posts:
        type: integer
        example: 123
        x-omitempty: false
      confluence_date_since_last_documentation:
        type: number
        example: 123.5
        x-omitempty: false
      confluence_last_documentation:
        type: string
        example: 2020-03-23T14:09:04.000Z
        x-omitempty: false
  top-contributors-flat-output:
    title: Top contributors output
    description: Top contributors output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      from:
        type: integer
        example: 1552790984700
      to:
        type: integer
        example: 1552790984700
      limit:
        type: integer
        example: 10
      offset:
        type: integer
        example: 2
      search:
        type: string
        example: john
      sort_field:
        type: string
        example: gerrit_merged_changesets
      sort_order:
        type: string
        example: desc
      contributors:
        type: array
        items:
          $ref: "#/definitions/contributor-flat-stats"
  unique-identity-nested-data-output:
    title: Unique identity nested data output
    description: Unique indentity nested data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
      profile:
        type: object
        $ref: "#/definitions/profile-data-output"
      identities:
        type: array
        items:
          $ref: "#/definitions/identity-data-output"
      enrollments:
        type: array
        items:
          $ref: "#/definitions/enrollment-nested-data-output"
  get-list-profiles-output:
    title: List profiles data output
    description: List profiles data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      rows:
        type: integer
        example: 55
      uids:
        type: array
        items:
          $ref: "#/definitions/unique-identity-nested-data-output"
  get-profile-enrollments-data-output:
    title: Profile enrollments data output
    description: Profile enrollments data output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      enrollments:
        type: array
        items:
          $ref: "#/definitions/enrollment-nested-data-output"
  identity-short-output:
    title: Identity data output - short
    description: Identity data - short
    type: object
    properties:
      source:
        type: string
        example: github
        x-go-custom-tag: 'yaml:"S"'
      email:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"E,omitempty"'
        example: lgryglicki@cncf.io
      name:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"M,omitempty"'
        example: Lukasz Gryglicki
      username:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"U,omitempty"'
        example: lukaszgryglicki
  enrollment-short-output:
    title: Enrollment data output - short
    description: Enrollment data - short
    type: object
    properties:
      organization:
        type: string
        example: CNCF
        x-go-custom-tag: 'yaml:"C"'
      start:
        type: string
        example: 2019-09-02
        x-go-custom-tag: 'yaml:"F"'
      end:
        type: string
        example: 2019-09-02
        x-go-custom-tag: 'yaml:"T"'
  all-output:
    title: Human readable output for all data
    description: Human readable output for all data
    type: object
    properties:
      name:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"U,omitempty"'
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"E,omitempty"'
        example: lgryglicki@cncf.io
      gender:
        type: string
        example: male
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"S,omitempty"'
      is_bot:
        type: integer
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"B,omitempty"'
        example: 1
      country_code:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"C,omitempty"'
        example: PL
      identities:
        type: array
        x-omitempty: true
        x-go-custom-tag: 'yaml:"I,omitempty"'
        items:
          $ref: "#/definitions/identity-short-output"
      enrollments:
        type: array
        x-omitempty: true
        x-go-custom-tag: 'yaml:"R,omitempty"'
        items:
          $ref: "#/definitions/enrollment-short-output"
  all-array-output:
    title: Human readable output for all data
    description: Human readable output for all data
    type: object
    properties:
      profiles:
        type: array
        x-go-custom-tag: 'yaml:"P,omitempty"'
        items:
          $ref: "#/definitions/all-output"
  db-update:
    title: Profiles to be added and/or deleted from the affiliation database
    description: Profiles to be added and/or deleted from the affiliation database
    type: object
    properties:
      add:
        type: array
        x-go-custom-tag: 'yaml:"A,omitempty"'
        items:
          $ref: "#/definitions/all-output"
      del:
        type: array
        x-go-custom-tag: 'yaml:"R,omitempty"'
        items:
          $ref: "#/definitions/all-output"
  text-status-output:
    title: Status text for an API call
    description: Status text for an API call
    type: object
    properties:
      text:
        type: string
        x-go-custom-tag: 'yaml:"text"'
        x-omitempty: false
        example: API call was succesfull
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
responses:
  unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/error-response"
  invalid-request:
    description: Invalid request
    schema:
      $ref: "#/definitions/error-response"
  forbidden:
    description: Insufficient privilege to execute action.
    schema:
      $ref: "#/definitions/error-response"
  not-found:
    description: Not found.
    schema:
      $ref: "#/definitions/error-response"
  conflict:
    description: Duplicate resource
    schema:
      $ref: "#/definitions/error-response"
  internal-server-error:
    description: Internal server error
    schema:
      $ref: "#/definitions/error-response"
