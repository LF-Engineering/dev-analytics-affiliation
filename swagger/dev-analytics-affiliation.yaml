---
swagger: '2.0'
info:
  title: Dev Analytics Affiliation API
  version: '1.0'
  description: Dev Analytics Affiliations API
basePath: /v1
paths:
  /api-docs:
    get:
      summary: Get API documentation
      operationId: getDoc
      produces:
        - text/html
      responses:
        200:
          description: Success
      tags:
        - docs
  /health:
    get:
      summary: Health
      operationId: getHealth
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/health"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - health
  /affiliation/{projectSlugs}/top_contributors_csv:
    get:
      summary: Get top contributors with their stats
      operationId: getTopContributorsCSV
      produces:
        - application/octet-stream
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
            Content-Disposition:
              type: string
              pattern: attachment; filename="top_contributors.csv"
            Content-Type:
              type: string
              pattern: application/octet-stream
          schema:
            type: file
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - contributors
        - top
        - get
        - csv
      parameters:
        - $ref: '#/parameters/optional-auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/unix-millis-from'
        - $ref: '#/parameters/unix-millis-to'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
        - $ref: '#/parameters/sort-field'
        - $ref: '#/parameters/sort-order'
        - $ref: '#/parameters/data-source'
  /affiliation/{projectSlugs}/top_contributors:
    get:
      summary: Get top contributors with their stats
      operationId: getTopContributors
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/top-contributors-flat-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - contributors
        - top
        - get
      parameters:
        - $ref: '#/parameters/optional-auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/unix-millis-from'
        - $ref: '#/parameters/unix-millis-to'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
        - $ref: '#/parameters/sort-field'
        - $ref: '#/parameters/sort-order'
        - $ref: '#/parameters/data-source'
  /affiliation/{projectSlugs}/unaffiliated:
    get:
      summary: Get top unaffiliated users
      operationId: getUnaffiliated
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-unaffiliated-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - unaffiliated
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
  /affiliation/{projectSlugs}/matching_blacklist:
    get:
      summary: Get blacklisted emails
      operationId: getMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-matching-blacklist-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - matching_blacklist
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/{projectSlugs}/matching_blacklist/{email}:
    post:
      summary: Add blacklist email
      operationId: postMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/matching-blacklist-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - matching_blacklist
        - add
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/required-email'
    delete:
      summary: Delete blacklist email
      operationId: deleteMatchingBlacklist
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - matching_blacklist
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/required-email'
  /affiliation/{projectSlugs}/list_organizations:
    get:
      summary: Get organizations
      operationId: getListOrganizations
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-organizations-service-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - list_organizations
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/{projectSlugs}/add_organization/{orgName}:
    post:
      summary: Add organization
      operationId: postAddOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - add_organization
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlugs}/edit_organization/{orgID}/{orgName}:
    put:
      summary: Edit organization
      operationId: putEditOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - edit_organization
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-id'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlugs}/find_organization_by_id/{orgID}:
    get:
      summary: Find organization by ID
      operationId: getFindOrganizationByID
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - find_organization
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-id'
  /affiliation/{projectSlugs}/find_organization_by_name/{orgName}:
    get:
      summary: Find organization by Name
      operationId: getFindOrganizationByName
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/organization-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - find_organization
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-name'
  /affiliation/{projectSlugs}/delete_organization_by_id/{orgID}:
    delete:
      summary: Delete organization by ID
      operationId: deleteOrganization
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - organization
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-id'
  /affiliation/{projectSlugs}/list_domains:
    get:
      summary: Get organization domains
      operationId: getListOrganizationsDomains
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-organizations-domains-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - list_organization_domains
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
        - name: orgID
          in: query
          type: integer
          default: 0
          description: Organization ID, if you specify 0 it will list data for all organizations
  /affiliation/{projectSlugs}/add_domain/{orgName}/{domain}:
    put:
      summary: Add domain to organization (if not exists) and affiliate all profiles with that domain to this organization
      operationId: putOrgDomain
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully added domain to organization"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/put-org-domain-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - organization
        - domain
        - add
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/domain'
        - name: overwrite
          in: query
          type: boolean
          default: false
          description: If set, it will overwrite existing affiliations for users with matching domains
        - name: is_top_domain
          in: query
          type: boolean
          default: false
          description: If set, it will set top domain flag to true
        - name: skip_enrollments
          in: query
          type: boolean
          default: false
          description: If set, it will not change/add/remove/touch any enrollments
  /affiliation/{projectSlugs}/remove_domain/{orgName}/{domain}:
    delete:
      summary: Remove domain from organization
      operationId: deleteOrgDomain
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully added domain to organization"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - organization
        - domain
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/domain'
  /affiliation/{projectSlugs}/list_profiles:
    get:
      summary: Get profiles
      operationId: getListProfiles
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-list-profiles-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - list_profiles
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/rows'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/q'
  /affiliation/get_identity/{id}:
    get:
      summary: Get identity with given ID
      operationId: getIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/identity-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_identity
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/id'
  /affiliation/identity/{name}/{value}:
    get:
      summary: Get identity with given type name and value
      operationId: getIdentityByUser
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/identity-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_identity_by_user
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/name'
        - $ref: '#/parameters/value'
  /affiliation/{projectSlugs}/get_profile/{uuid}:
    get:
      summary: Get profile with given UUID
      operationId: getProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_profile
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlugs}/get_profile_by_username/{username}:
    get:
      summary: Get profile(s) with given username
      operationId: getProfileByUsername
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identities-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_profile_by_username
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/username'
  /affiliation/{projectSlugs}/delete_profile/{uuid}:
    delete:
      summary: Delete profile with given UUID (it will cascade delete all objects referring to that uuid)
      operationId: deleteProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - delete_profile
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - name: archive
          in: query
          type: boolean
          default: false
          description: If set, it will archive profile (and all dependend objects, so full restore will be possible)
  /affiliation/{projectSlugs}/unarchive_profile/{uuid}:
    post:
      summary: Unarchive profile with given UUID
      operationId: postUnarchiveProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - delete_profile
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlugs}/edit_profile/{uuid}:
    put:
      summary: Edit profile
      operationId: putEditProfile
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - edit_profile
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/email'
        - name: name
          in: query
          type: string
          description: Profile name (can be empty, if not set then no update of that parameter is made, applies to all remaining params)
        #- name: gender
        #  in: query
        #  type: string
        #  description: Profile gender (male or female)
        #- name: gender_acc
        #  in: query
        #  type: integer
        #  description: Profile gender probablity 1-100
        - name: is_bot
          in: query
          type: integer
          description: Profile bot flag 0 or 1
        - name: country_code
          in: query
          type: string
          description: "Profile country code - 2 letters: PL, US, checked against FK constraint 'countries' table"
  /affiliation/{projectSlugs}/add_unique_identity/{uuid}:
    post:
      summary: create unique identity and empty profile connected with it
      operationId: postAddUniqueIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - add_unique_identity
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlugs}/add_identity/{source}:
    post:
      summary: create idenity (unique by source, email, name, username), if uuid is set connect it to that uuid or create new unique identity with that uuid otherwise
      operationId: postAddIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - add_unique_identity
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/email'
        - name: source
          in: path
          type: string
          required: true
          description: Identity source
        - name: name
          in: query
          type: string
          description: Identity name (can be empty, if not set then no update of that parameter is made, applies to all remaining params)
        - name: username
          in: query
          type: string
          description: Identity username
        - name: uuid
          in: query
          type: string
          description: Identity UUID (uuid it belongs to), can be empty, new unique identity will be added then
  /affiliation/{projectSlugs}/delete_identity/{id}:
    delete:
      summary: Delete identity with given ID (it will cascade delete all objects referring to that identity)
      operationId: deleteIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - delete_identity
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - name: id
          in: path
          type: string
          required: true
          description: Identity ID to be deleted
  /affiliation/merge_all:
    put:
      summary: Detect and merge all profiles using their identities emails
      operationId: putMergeAll
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully merged profiles"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge
        - all
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/debug'
        - $ref: '#/parameters/dry'
  /affiliation/{projectSlugs}/merge_unique_identities/{fromUUID}/{toUUID}:
    put:
      summary: Merge Unique Identities fromUUID into toUUID
      operationId: putMergeUniqueIdentities
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully merged unique identities"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - name: fromUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge from
        - name: toUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge to
        - name: archive
          in: query
          type: boolean
          default: true
          description: If set, it will archive data so it can be unmerged later
  /affiliation/{projectSlugs}/move_identity/{fromID}/{toUUID}:
    put:
      summary: Move identity from fromID to unique identity/profile toUUID
      operationId: putMoveIdentity
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully moved identity"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - name: fromID
          in: path
          type: string
          required: true
          description: Identity ID to merge from
        - name: toUUID
          in: path
          type: string
          required: true
          description: Unique Identity/Profile UUID to merge to
        - name: archive
          in: query
          type: boolean
          default: true
          description: If set, it will attempt to unarchive data
  /affiliation/{projectSlugs}/enrollments/{uuid}:
    get:
      summary: Get profile's enrollments - profile specified by UUID
      operationId: getProfileEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/get-profile-enrollments-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_profile_enrollments
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
  /affiliation/{projectSlugs}/add_enrollment/{uuid}/{orgName}:
    post:
      summary: Add enrollment to profile
      operationId: postAddEnrollment
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output-no-dates"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - add_enrollment
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/is-project-specific'
        - $ref: '#/parameters/role'
        - $ref: '#/parameters/merge'
  /affiliation/{projectSlugs}/edit_enrollment/{uuid}/{orgName}:
    put:
      summary: Edit profile enrollment
      operationId: putEditEnrollment
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - edit_enrollment
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/is-project-specific'
        - $ref: '#/parameters/role'
        - $ref: '#/parameters/merge'
        - name: new_start
          in: query
          type: string
          format: date-time
          description: Optional date from (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new start date for the existing enrollment
        - name: new_end
          in: query
          type: string
          format: date-time
          description: Optional date to (default is 2100-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new end date for the existing enrollment
        - name: new_is_project_specific
          in: query
          type: boolean
          description: 'Optional is_project_specific flag (can change project specific affiliation into global and vice versa) - can only be used when projectSlugs contain a single project'
        - name: new_role
          in: query
          type: string
          description: 'Role: Contributor, Maintainer, ...'
  /affiliation/{projectSlugs}/edit_enrollment_by_id/{enrollment_id}:
    put:
      summary: Edit enrollment (using enrollment ID)
      operationId: putEditEnrollmentByID
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - edit_enrollment
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/enrollment-id'
        - $ref: '#/parameters/merge'
        - name: new_start
          in: query
          type: string
          format: date-time
          description: Optional date from (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new start date for the existing enrollment
        - name: new_end
          in: query
          type: string
          format: date-time
          description: Optional date to (default is 2100-01-01), must be in format 2015-05-05T15:15[:05Z], this is a new end date for the existing enrollment
        - name: new_is_project_specific
          in: query
          type: boolean
          description: 'Optional is_project_specific flag (can change project specific affiliation into global and vice versa) - can only be used when projectSlugs contain a single project'
        - name: new_role
          in: query
          type: string
          description: 'Role: Contributor, Maintainer, ...'
  /affiliation/{projectSlugs}/delete_enrollment/{id}:
    delete:
      summary: Delete enrollment from profile
      operationId: deleteEnrollment
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - delete_enrollment
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - name: id
          in: path
          type: integer
          required: true
          description: Enrollment ID
  /affiliation/{projectSlugs}/delete_enrollments/{uuid}/{orgName}:
    delete:
      summary: Delete orgName enrollment from profile
      operationId: deleteEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - delete_enrollments
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/is-project-specific'
        - $ref: '#/parameters/role'
  /affiliation/{projectSlugs}/merge_enrollments/{uuid}/{orgName}:
    put:
      summary: Merge overlapping enrollments for UUID/orgName
      operationId: putMergeEnrollments
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/unique-identity-nested-data-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - merge_enrollments
        - put
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slugs'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/org-name'
        - $ref: '#/parameters/is-project-specific'
        - name: all_projects
          in: query
          type: boolean
          description: if set, all enrollments will be merged (global one and 0 or more project specific ones)
  /affiliation/{projectSlug}/single/{uuid}/{dt}:
    get:
      summary: Get affiliation for a given UUID/date/project_slug 9single org)
      operationId: getAffiliationSingle
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/org-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - single
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/dt'
  /affiliation/{projectSlug}/multi/{uuid}/{dt}:
    get:
      summary: Get affiliation for a given UUID/date/project_slug (multiple orgs)
      operationId: getAffiliationMultiple
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/orgs-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - multiple
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/dt'
  /affiliation/{projectSlug}/both/{uuid}/{dt}:
    get:
      summary: Get affiliation for a given UUID/date/project_slug (single org and multiple orgs)
      operationId: getAffiliationBoth
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/org-and-orgs-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - both
        - single
        - multiple
        - get
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/project-slug'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/dt'
  /affiliation/all:
    get:
      summary: Return all affiliations data in human readable format
      operationId: getAllAffiliations
      produces:
        - application/yaml
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/all-array-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - all
        - get
      parameters:
        - $ref: '#/parameters/auth'
  /affiliation/bulk_update:
    post:
      summary: Bulk process updates to DB
      operationId: postBulkUpdate
      consumes:
        - application/yaml
        - application/json
      produces:
        - application/yaml
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - bulk_update
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - name: body
          in: body
          required: true
          description: arrays of profiles to be added and/or deleted
          schema:
            $ref: "#/definitions/db-update"
  /affiliation/hide_emails:
    put:
      summary: For any email found in non-email column, remove its @domain part
      operationId: putHideEmails
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully hidden emails"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - hide_emails
        - all
      parameters:
        - $ref: '#/parameters/auth'
  /affiliation/map_org_names:
    put:
      summary: Map common incorrect company names to correct ones using definitions from map_org_names.yaml
      operationId: putMapOrgNames
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully mapped organizations names"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - map_org_names
        - all
      parameters:
        - $ref: '#/parameters/auth'
  /affiliation/list_projects:
    get:
      summary: list project_slugs that current user has affiliation management access to
      operationId: getListProjects
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully fetched project slugs list"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/list-projects-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - list_projects
      parameters:
        - $ref: '#/parameters/auth'
  /affiliation/det_aff_range:
    put:
      summary: For all profiles that have a single company affiliation (in a given project or global), detect time range when ES has contributions and use that range to set start/end dates (if not already set)
      operationId: putDetAffRange
      produces:
        - application/json
      responses:
        "200":
          description: "Successfully configured affiliations date ranges"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - det_aff_range
        - all
      parameters:
        - $ref: '#/parameters/auth'
  /affiliation//list_slug_mappings:
    get:
      summary: 'Get all DA - SF mappings'
      operationId: getListSlugMappings
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/list-slug-mappings"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - list_slug_mappings
        - get
  /affiliation/get_slug_mapping:
    get:
      summary: 'Find DA-SF mapping for diven DA anme, SF name or SF ID'
      operationId: getSlugMapping
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/slug-mapping"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - get_slug_mapping
        - get
      parameters:
        - $ref: '#/parameters/da-name'
        - $ref: '#/parameters/sf-name'
        - $ref: '#/parameters/sf-id'
  /affiliation/add_slug_mapping:
    post:
      summary: 'Add LF-DA mapping'
      operationId: postAddSlugMapping
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/slug-mapping"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - add_slug_mapping
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/req-da-name'
        - $ref: '#/parameters/req-sf-name'
        - $ref: '#/parameters/req-sf-id'
  /affiliation/delete_slug_mapping:
    delete:
      summary: 'Delete DA-SF mapping'
      operationId: deleteSlugMapping
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - slug_mapping
        - delete
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/da-name'
        - $ref: '#/parameters/sf-name'
        - $ref: '#/parameters/sf-id'
  /affiliation/edit_slug_mapping:
    put:
      summary: 'Edit DA-SF mapping'
      operationId: putEditSlugMapping
      produces:
        - application/json
      responses:
        "200":
          description: "Success"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/slug-mapping"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - edit_slug_mapping
        - post
      parameters:
        - $ref: '#/parameters/auth'
        - $ref: '#/parameters/da-name'
        - $ref: '#/parameters/sf-name'
        - $ref: '#/parameters/sf-id'
        - $ref: '#/parameters/new-da-name'
        - $ref: '#/parameters/new-sf-name'
        - $ref: '#/parameters/new-sf-id'
  /affiliation/cache_top_contributors:
    put:
      summary: Precalculate top_contributors API for all currently defined projects for a few predefined data ranges
      operationId: putCacheTopContributors
      produces:
        - application/json
      responses:
        "200":
          description: "Spawned caching job"
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
          schema:
            $ref: "#/definitions/text-status-output"
        "400":
          $ref: "#/responses/bad-request"
        "401":
          $ref: "#/responses/unauthorized"
        "403":
          $ref: "#/responses/forbidden"
        "404":
          $ref: "#/responses/not-found"
        "500":
          $ref: "#/responses/internal-server-error"
      tags:
        - affiliation
        - cache_top_contributors
        - all
      parameters:
        - $ref: '#/parameters/auth'
parameters:
  auth:
    name: Authorization
    in: header
    type: string
    required: true
  optional-auth:
    name: Authorization
    in: header
    type: string
  project-slug:
    name: projectSlug
    in: path
    type: string
    required: true
    description: Project slug URL encoded
  project-slugs:
    name: projectSlugs
    in: path
    type: string
    required: true
    description: Project slugs URL encoded like 'academy-software-foundation/opencue,lfn/onap,hyperledger/burrow'
  username:
    name: username
    in: path
    type: string
    required: true
    description: Username
  id:
    name: id
    in: path
    type: string
    required: true
    description: ID of the user
  name:
    name: name
    in: path
    type: string
    required: true
    description: search key
  value:
    name: value
    in: path
    type: string
    required: true
    description: search value
  uuid:
    name: uuid
    in: path
    type: string
    required: true
    description: UUID
  dt:
    name: dt
    in: path
    type: string
    format: date-time
    required: true
    description: Date (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z]
  enrollment-id:
    name: enrollment_id
    in: path
    type: integer
    required: true
    description: Enrollment ID
  unix-millis-from:
    name: from
    in: query
    type: integer
    description: the datetime from, e.g 1552790984700, default is 90 days ago
  unix-millis-to:
    name: to
    in: query
    type: integer
    description: the datetime to, e.g 1552790984700, default is now
  page:
    name: page
    in: query
    type: integer
    default: 1
    description: If set, it will return rows from a given page
  rows:
    name: rows
    in: query
    type: integer
    default: 10
    description: rows per page, if 0 maximum page size 65535 is set
  q:
    name: q
    in: query
    type: string
    default: ''
    description: If set, it will return matching '%q%' (possibly using more than one property for that search)
  limit:
    name: limit
    in: query
    type: integer
    description: The numbers of data to return, default 10, for CSV export default is 10000
  offset:
    name: offset
    in: query
    type: integer
    default: 0
    description: the page offset
  search:
    name: search
    in: query
    type: string
    description: |
      for example john, it can be specified in multiple forms (must be urlencoded)
      empty - so search filter will be applied
      john - will search using like '.*john.*' no case sensitive regexp pattern on author_org_name, author_name and author_uuids columns
      all=john - will fetch list of all string type columns (per index pattern) and then search for '.*john.*' (case insensitive) on all of them
      all=john,pamela,..,josh - will search for multiple values on all columns
      col1,col2,...,colN=val1,val2,...,valM - will search for any of val1 - valM on all col1 - colN columns using N x M or conditions
  sort-field:
    name: sort_field
    in: query
    type: string
    description: |
      sort field for example gerrit_merged_changesets, can be fetched from "data_source_types" object returned per given project slug
      if not specified API sorts contributors by count of documents related to their activity descending - so its most probable to get actual top contributors across all data sources defined for the project
      if defined it must be one of fields returned in data source types fields object (from "data_source_types" object + special author_uuid) in that case API fetches contributors by this field first
      and then once it has list of their UUIDs (after searching, sorting and paging) - it uses that list of UUIDs to get the remaining fields and finally merge results into one object.
  sort-order:
    name: sort_order
    in: query
    type: string
    description: |
      sort order allowed desc or asc, default is desc
      when sorting asc (which is almost senseless) API only returns objects that have at least 1 document matching this sort criteria
      so for example sort by git commits asc, will start from contributors having at least one commit, not 0).
  required-email:
    name: email
    in: path
    type: string
    required: true
    description: email
  email:
    name: email
    in: query
    type: string
    description: email
  org-id:
    name: orgID
    in: path
    type: integer
    required: true
    description: Organization ID
  org-name:
    name: orgName
    in: path
    type: string
    required: true
    description: Organization name
  domain:
    name: domain
    in: path
    type: string
    required: true
    description: Domain
  start:
    name: start
    in: query
    type: string
    format: date-time
    description: Optional date from (default is 1900-01-01), must be in format 2015-05-05T15:15[:05Z]
  end:
    name: end
    in: query
    type: string
    format: date-time
    description: Optional date to (default is 2100-01-01), must be in format 2015-05-05T15:15[:05Z]
  merge:
    name: merge
    in: query
    type: boolean
    description: merge setting
  is-project-specific:
    name: is_project_specific
    in: query
    type: boolean
    description: 'false: global enrollment (project_slug = null), true: project specific (project_slug non-null), most APIs require specifying single project in projectSlugs to use this parameter'
  role:
    name: role
    in: query
    type: string
    description: 'Role: Contributor, Maintainer, ...'
  debug:
    name: debug
    in: query
    type: integer
    description: debug setting
  dry:
    name: dry
    in: query
    type: boolean
    description: dry-run setting
  da-name:
    name: da_name
    in: query
    type: string
    description: 'For example: lfn/onap'
  sf-name:
    name: sf_name
    in: query
    type: string
    description: 'For example: ONAP'
  sf-id:
    name: sf_id
    in: query
    type: string
    description: 'For example: 1234-deadbeef'
  req-da-name:
    name: da_name
    in: query
    type: string
    required: true
    description: 'For example: lfn/onap'
  req-sf-name:
    name: sf_name
    in: query
    type: string
    required: true
    description: 'For example: ONAP'
  req-sf-id:
    name: sf_id
    in: query
    type: string
    required: true
    description: 'For example: 1234-deadbeef'
  new-da-name:
    name: new_da_name
    in: query
    type: string
    description: 'For example: lfn/onap'
  new-sf-name:
    name: new_sf_name
    in: query
    type: string
    description: 'For example: ONAP'
  new-sf-id:
    name: new_sf_id
    in: query
    type: string
    description: 'For example: 1234-deadbeef'
  data-source:
    name: data_source
    in: query
    type: string
    description: 'comma separated list of data source types, not case sensitive'
definitions:
  health:
    type: object
    title: Health
    description: Properties for Health
    properties:
      DateTime:
        type: string
        example: "2019-05-29 16:55:53.849593192 +0900 KST m=+12.237337959"
      DevAnalyticsAffiliationService:
        type: string
        example: "Running"
  error-response:
    type: object
    title: Error Response
    description: Standard error format
    properties:
      Code:
        type: string
      Message:
        type: string
  put-org-domain-output:
    title: Put Org Domain Output
    description: Stats and info about adding domain to organization
    type: object
    properties:
      deleted:
        type: string
        example: 12
      added:
        type: string
        example: 8
      info:
        type: string
        example: no such organization Mikrosoft
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
  profile-data-output:
    title: Profile data output
    description: Profile data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      name:
        type: string
        x-nullable: true
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        example: lgryglicki@cncf.io
      #gender:
      #  type: string
      #  example: male
      #  x-nullable: true
      #gender_acc:
      #  type: integer
      #  example: 100
      #  x-nullable: true
      is_bot:
        type: integer
        # database doesn't have null, but we can use to to call EditProfile and skip updating is_bot
        x-nullable: true
        example: 1
      country_code:
        type: string
        x-nullable: true
        example: PL
  country-data-output:
    title: Country data output
    description: Country data
    type: object
    properties:
      code:
        type: string
        example: PL
      name:
        type: string
        example: Poland
      alpha3:
        type: string
        example: POL
  identity-data-output:
    title: Identity data output
    description: Identity data
    type: object
    properties:
      id:
        type: string
        example: 16fe424acecf8d614d102fc0ece919a22200481d
      source:
        type: string
        example: github
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
        x-nullable: true
      name:
        type: string
        x-nullable: true
        example: Lukasz Gryglicki
      username:
        type: string
        x-nullable: true
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        example: lgryglicki@cncf.io
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
  unique-identity-data-output:
    title: Unique Identity data output
    description: Unique Identity data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
  enrollment-nested-data-output:
    title: Enrollment data output
    description: Enrollment data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      organization_id:
        type: integer
        example: 33073
      start:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      end:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      organization:
        type: object
        $ref: "#/definitions/organization-data-output"
      project_slug:
        type: string
        example: lfn/onap
        x-nullable: true
      role:
        type: string
        example: Maintainer
  enrollment-nested-data-output-no-dates:
    title: Enrollment data output (only to support hiding default start/end dates)
    description: Enrollment data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      organization_id:
        type: integer
        example: 33073
      start:
        type: string
        example: '2019-09-02 03:00:33.000000 or empty'
        x-omitempty: false
      end:
        type: string
        example: '2019-09-02 03:00:33.000000 or empty'
        x-omitempty: false
      organization:
        type: object
        $ref: "#/definitions/organization-data-output"
      project_slug:
        type: string
        example: lfn/onap
        x-nullable: true
      role:
        type: string
        example: Maintainer
  enrollment-data-output:
    title: Enrollment data output
    description: Enrollment data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      organization_id:
        type: integer
        example: 33073
      start:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      end:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      project_slug:
        type: string
        example: lfn/onap
        x-nullable: true
      role:
        type: string
        example: Maintainer
  enrollment-project-range:
    title: Enrollment project range
    description: Used when determining projects enrollments date ranges using ES contributions date range
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      project_slug:
        type: string
        example: lfn/onap
        x-nullable: true
      start:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
      end:
        type: string
        format: date-time
        example: '2019-09-02 03:00:33.000000'
  organization-data-output:
    title: Organization data output
    description: Organization data
    type: object
    properties:
      id:
        type: integer
        example: 35067
      name:
        type: string
        example: CNCF
  matching-blacklist-output:
    title: Matching blacklist data output
    description: Matching blacklist data
    type: object
    properties:
      excluded:
        type: string
        example: skip@domain.org
  get-matching-blacklist-output:
    title: Matching blacklist data output
    description: Matching blacklist data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      rows:
        type: integer
        example: 55
      emails:
        type: array
        items:
          $ref: "#/definitions/matching-blacklist-output"
  domain-data-output:
    title: Domain data
    description: Domain data
    type: object
    properties:
      id:
        type: integer
        example: 1000
      organization_id:
        type: integer
        example: 2000
      # this should be called 'domain' but we need to stay compatible
      name:
        type: string
        example: cncf.io
      is_top_domain:
        type: boolean
        example: true
      organization_name:
        type: string
        example: CNCF
  organization-nested-data-output:
    title: Organization data with nested organization domains
    description: Organization data with nested organization domains
    type: object
    properties:
      id:
        type: integer
        example: 1000
      name:
        type: string
        example: CNCF
      domains:
        type: array
        items:
          $ref: "#/definitions/domain-data-output"
  organization-service-data-output:
    title: Organization data with nested organization domains
    description: Organization data with nested organization domains
    type: object
    properties:
      id:
        type: string
        example: "00Ta3420000Te"
      name:
        type: string
        example: CNCF
      domains:
        type: array
        items:
          $ref: "#/definitions/domain-data-output"
  get-list-organizations-service-output:
    title: List organizations data output
    description: List organizations data
    type: object
    properties:
      user:
        type: string
        example: testusername
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      n_records:
        type: integer
        example: 55
      rows:
        type: integer
        example: 9
      organizations:
        type: array
        items:
          $ref: "#/definitions/organization-service-data-output"
  get-list-organizations-output:
    title: List organizations data output
    description: List organizations data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      n_records:
        type: integer
        example: 55
      rows:
        type: integer
        example: 9
      organizations:
        type: array
        items:
          $ref: "#/definitions/organization-nested-data-output"
  get-list-organizations-domains-output:
    title: List organizations domains data output
    description: List organizations domains data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      n_records:
        type: integer
        example: 55
      rows:
        type: integer
        example: 9
      domains:
        type: array
        items:
          $ref: "#/definitions/domain-data-output"
  unaffiliated-data-output:
    title: Unaffiliated user data
    description: Unaffiliated user data
    type: object
    properties:
      name:
        type: string
        example: Lukasz Gryglicki
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      contributions:
        type: integer
        example: 100
  get-unaffiliated-output:
    title: Unaffiliated users output
    description: Unaffiliated users output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      page:
        type: integer
        example: 2
      rows:
        type: integer
        example: 10
      unaffiliated:
        type: array
        items:
          $ref: "#/definitions/unaffiliated-data-output"
  contributor-flat-stats:
    title: Contributor stats
    description: contributor stats
    type: object
    # TOPCON
    properties:
      name:
        type: string
        example: Lukasz Gryglicki
        x-omitempty: false
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
        x-omitempty: false
      email:
        type: string
        example: lgryglicki@cncf.io
        x-omitempty: false
      organization:
        type: string
        example: CNCF
        x-omitempty: false
      git_commits:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_added:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_removed:
        type: integer
        example: 123
        x-omitempty: false
      git_lines_changed:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_merged_changesets:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_approvals:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_changesets:
        type: integer
        example: 123
        x-omitempty: false
      gerrit_comments:
        type: integer
        example: 123
        x-omitempty: false
      jira_comments:
        type: integer
        example: 123
        x-omitempty: false
      jira_issues_created:
        type: integer
        example: 123
        x-omitempty: false
      jira_issues_assigned:
        type: integer
        example: 123
        x-omitempty: false
      jira_issues_closed:
        type: integer
        example: 123
        x-omitempty: false
      jira_average_issue_open_days:
        type: number
        example: 123.5
        x-omitempty: false
      confluence_pages_created:
        type: integer
        example: 123
        x-omitempty: false
      confluence_pages_edited:
        type: integer
        example: 123
        x-omitempty: false
      confluence_comments:
        type: integer
        example: 123
        x-omitempty: false
      confluence_blog_posts:
        type: integer
        example: 123
        x-omitempty: false
      confluence_attachments:
        type: integer
        example: 123
        x-omitempty: false
      confluence_days_since_last_documentation:
        type: number
        example: 123.5
        x-omitempty: false
      confluence_last_action_date:
        type: string
        example: 2020-03-23T14:09:04.000Z
        x-omitempty: false
      github_issue_issues_created:
        type: integer
        example: 123
        x-omitempty: false
      github_issue_issues_closed:
        type: integer
        example: 123
        x-omitempty: false
      github_issue_issues_assigned:
        type: integer
        example: 123
        x-omitempty: false
      github_issue_average_time_open_days:
        type: number
        example: 123.5
        x-omitempty: false
      github_pull_request_prs_created:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_merged:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_open:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_closed:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_reviewed:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_approved:
        type: integer
        example: 123
        x-omitempty: false
      github_pull_request_prs_review_comments:
        type: integer
        example: 123
        x-omitempty: false
      bugzilla_issues_created:
        type: integer
        example: 123
        x-omitempty: false
      bugzilla_issues_closed:
        type: integer
        example: 123
        x-omitempty: false
      bugzilla_issues_assigned:
        type: integer
        example: 123
        x-omitempty: false
      bugzilla_average_issue_open_days:
        type: number
        example: 123.5
        x-omitempty: false
  data-source-type-fields:
    title: Data source type data
    description: Data source type name + list of its columns returned by Top Contributors API
    type: object
    properties:
      name:
        type: string
        example: github/pull_request
      fields:
        type: array
        items:
          type: string
          example: git_commits
  data-source-type-items:
    title: Data source type items fields
    description: Data source type items fields
    properties:
      key:
        type: string
        example: git_lines_added
      name:
        type: string
        example: LOC added
  configured-data-sources-fields:
    title: Configured data sources
    description: Configured data sources
    type: object
    properties:
      key:
        type: string
        example: github/pull_request
      name:
        type: string
        example: Github PRs
      filter_selected:
        type: boolean
        example: true
      no_data:
        type: boolean
        x-nullable: true
        example: true
      data_types:
        type: array
        items:
          $ref: "#/definitions/data-source-type-items"
  top-contributors-flat-output:
    title: Top contributors output
    description: Top contributors output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      from:
        type: integer
        example: 1552790984700
      to:
        type: integer
        example: 1552790984700
      limit:
        type: integer
        example: 10
      offset:
        type: integer
        example: 2
      search:
        type: string
        example: john
      sort_field:
        type: string
        example: gerrit_merged_changesets
      sort_order:
        type: string
        example: desc
      public:
        type: boolean
        x-omitempty: false
        example: false
      warning:
        type: string
        example: desc
      contributors_count:
        type: integer
        example: 12768
      contributors:
        type: array
        items:
          $ref: "#/definitions/contributor-flat-stats"
      data_source_types:
        type: array
        items:
          $ref: "#/definitions/data-source-type-fields"
      configured_data_sources:
        type: array
        items:
          $ref: "#/definitions/configured-data-sources-fields"
  unique-identity-nested-data-output:
    title: Unique identity nested data output
    description: Unique indentity nested data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
      profile:
        type: object
        $ref: "#/definitions/profile-data-output"
      identities:
        type: array
        items:
          $ref: "#/definitions/identity-data-output"
      enrollments:
        type: array
        items:
          $ref: "#/definitions/enrollment-nested-data-output"
  unique-identity-nested-data-output-no-dates:
    title: Unique identity nested data output (only tu support hiding default start/end dates)
    description: Unique indentity nested data
    type: object
    properties:
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      last_modified:
        type: string
        format: date-time
        x-nullable: true
        example: '2019-09-02 03:00:33.000000'
      profile:
        type: object
        $ref: "#/definitions/profile-data-output"
      identities:
        type: array
        items:
          $ref: "#/definitions/identity-data-output"
      enrollments:
        type: array
        items:
          $ref: "#/definitions/enrollment-nested-data-output-no-dates"
  get-list-profiles-output:
    title: List profiles data output
    description: List profiles data
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      n_pages:
        type: integer
        example: 10
      page:
        type: integer
        example: 1
      search:
        type: string
        example: 'q=root'
      rows:
        type: integer
        example: 55
      uids:
        type: array
        items:
          $ref: "#/definitions/unique-identity-nested-data-output"
  unique-identities-nested-data-output:
    title: Array of unique identity nested data outputs
    description: Array of unique identity nested data outputs
    type: object
    properties:
      profiles:
        type: array
        items:
          $ref: "#/definitions/unique-identity-nested-data-output"
  get-profile-enrollments-data-output:
    title: Profile enrollments data output
    description: Profile enrollments data output
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      scope:
        type: string
        example: academy-software-foundation/opencue
      uuid:
        type: string
        example: 00024380e0d8d854b42bf505333f245de77bd71d
      enrollments:
        type: array
        items:
          $ref: "#/definitions/enrollment-nested-data-output"
  identity-short-output:
    title: Identity data output - short
    description: Identity data - short
    type: object
    properties:
      source:
        type: string
        example: github
        x-go-custom-tag: 'yaml:"S"'
      email:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"E,omitempty"'
        example: lgryglicki@cncf.io
      name:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"M,omitempty"'
        example: Lukasz Gryglicki
      username:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"U,omitempty"'
        example: lukaszgryglicki
  enrollment-short-output:
    title: Enrollment data output - short
    description: Enrollment data - short
    type: object
    properties:
      organization:
        type: string
        example: CNCF
        x-go-custom-tag: 'yaml:"C"'
      start:
        type: string
        example: 2019-09-02
        x-go-custom-tag: 'yaml:"F"'
      end:
        type: string
        example: 2019-09-02
        x-go-custom-tag: 'yaml:"T"'
      role:
        type: string
        example: Maintainer
        x-go-custom-tag: 'yaml:"R"'
      project_slug:
        type: string
        example: lfn/onap
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"P,omitempty"'
  all-output:
    title: Human readable output for all data
    description: Human readable output for all data
    type: object
    properties:
      name:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"U,omitempty"'
        example: lukaszgryglicki
      email:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"E,omitempty"'
        example: lgryglicki@cncf.io
      #gender:
      #  type: string
      #  example: male
      #  x-nullable: true
      #  x-omitempty: true
      #  x-go-custom-tag: 'yaml:"S,omitempty"'
      is_bot:
        type: integer
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"B,omitempty"'
        example: 1
      country_code:
        type: string
        x-nullable: true
        x-omitempty: true
        x-go-custom-tag: 'yaml:"C,omitempty"'
        example: PL
      identities:
        type: array
        x-omitempty: true
        x-go-custom-tag: 'yaml:"I,omitempty"'
        items:
          $ref: "#/definitions/identity-short-output"
      enrollments:
        type: array
        x-omitempty: true
        x-go-custom-tag: 'yaml:"R,omitempty"'
        items:
          $ref: "#/definitions/enrollment-short-output"
  all-array-output:
    title: Human readable output for all data
    description: Human readable output for all data
    type: object
    properties:
      profiles:
        type: array
        x-go-custom-tag: 'yaml:"P,omitempty"'
        items:
          $ref: "#/definitions/all-output"
  db-update:
    title: Profiles to be added and/or deleted from the affiliation database
    description: Profiles to be added and/or deleted from the affiliation database
    type: object
    properties:
      add:
        type: array
        x-go-custom-tag: 'yaml:"A,omitempty"'
        items:
          $ref: "#/definitions/all-output"
      del:
        type: array
        x-go-custom-tag: 'yaml:"R,omitempty"'
        items:
          $ref: "#/definitions/all-output"
  project-data-output:
    title: Project data
    description: project data (slug and name)
    type: object
    properties:
      project_slug:
        type: string
        example: lfn/onap
      project_name:
        type: string
        example: Kubernetes
  list-projects-output:
    title: List projects output
    description: Array of string, each item is a project slug
    type: object
    properties:
      user:
        type: string
        example: lukaszgryglicki
      projects:
        type: array
        items:
          $ref: "#/definitions/project-data-output"
  text-status-output:
    title: Status text for an API call
    description: Status text for an API call
    type: object
    properties:
      text:
        type: string
        x-go-custom-tag: 'yaml:"text"'
        x-omitempty: false
        example: API call was succesfull
  list-slug-mappings:
    title: 'List DA-SF mappings'
    description: 'List DA-SF mappings'
    type: object
    properties:
      mappings:
        type: array
        items:
          $ref: "#/definitions/slug-mapping"
  slug-mapping:
    title: 'Single DA-SF mapping'
    description: 'Single DA-SF mapping'
    type: object
    properties:
      da_name:
        type: string
        example: 'lfn/onap'
      sf_name:
        type: string
        example: 'ONAP'
      sf_id:
        type: string
        example: '1234-deadbeef'
  org-output:
    type: object
    properties:
      org:
        type: string
        example: 'CNCF'
  orgs-output:
    type: object
    properties:
      orgs:
        type: array
        items:
          type: string
          example: 'CNCF'
  org-and-orgs-output:
    type: object
    properties:
      org:
        type: string
        example: 'CNCF'
      orgs:
        type: array
        items:
          type: string
          example: 'CNCF'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
responses:
  unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/error-response"
  bad-request:
    description: Invalid request
    schema:
      $ref: "#/definitions/error-response"
  forbidden:
    description: Insufficient privilege to execute action.
    schema:
      $ref: "#/definitions/error-response"
  not-found:
    description: Not Found.
    schema:
      $ref: "#/definitions/error-response"
  conflict:
    description: Duplicate resource
    schema:
      $ref: "#/definitions/error-response"
  internal-server-error:
    description: Internal server error
    schema:
      $ref: "#/definitions/error-response"
